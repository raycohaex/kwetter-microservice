version: '3.4'

services:
  db.kweet:
    image: mysql
    networks:
      - app

  db.usertimeline:
    image: mongo
    networks:
      - app

  cache.usertimeline:
    image: redis:alpine
    networks:
      - app

  db.auth:
    image: postgres:13.2
    restart: unless-stopped
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
    networks:
      - keycloak
      - app

  keycloak:
    depends_on:
      - db.auth
    container_name: keycloak
    environment:
      DB_VENDOR: postgres
      DB_ADDR: db.auth
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: keycloak
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
    image: jboss/keycloak:latest
    ports:
      - "8080:8080"
    restart: unless-stopped
    networks:
      - keycloak
      - app

  service.rabbitmq:
    image: rabbitmq:3-management-alpine
    networks:
      - app

  db.neo4j:
    image: neo4j
    networks:
      - app

  api.kweet:
    image: ${DOCKER_REGISTRY-}kweetapi
    build:
      context: .
      dockerfile: src/Services/Kweet/Kweet.API/Dockerfile
    networks:
      - app

  api.usertimeline:
    image: ${DOCKER_REGISTRY-}usertimelineapi
    build:
      context: .
      dockerfile: src/Services/UserTimeline/UserTimeline.API/Dockerfile
    networks:
      - app

  api.social:
    image: ${DOCKER_REGISTRY-}socialapi
    build:
      context: .
      dockerfile: src/Services/Social/Social.API/Dockerfile
    networks:
      - app

  apigateway:
    image: ${DOCKER_REGISTRY-}apigateway
    build:
      context: .
      dockerfile: src/ApiGateway/ApiGateway/Dockerfile
    networks:
      - app

volumes:
  mysql_data:
  mongo_data:
  neo4j_data:

networks:
  keycloak:
  app:
