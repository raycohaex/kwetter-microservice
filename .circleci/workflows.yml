version: 2.1

orbs:
  gcp-gcr: circleci/gcp-gcr@0.15.0

executors:
  dind-executor:
    docker:
      - image: 'docker:stable-dind'
    resource_class: small
  scanner:
    docker:
      - image: openjdk:11

parameters:
  run-kweet-workflow:
    type: boolean
    default: false
  run-usertimeline-workflow:
    type: boolean
    default: false
  run-common-workflow:
    type: boolean
    default: false

jobs:
  test-kweetapi:
    description: Test the Kweet API
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:6.0
    steps:
      - checkout
      - run:
          name: Unit & Integration tests
          command: |
            cd dotnet-backend/src/Tests/Unit/Kweet.Application.UnitTests
            dotnet test --collect:"XPlat Code Coverage"
            cd ../../Integration/Kweet.IntegrationTests
            dotnet test --collect:"XPlat Code Coverage"
      - store_artifacts:
          path: dotnet-backend/src/Tests/Unit/Kweet.Application.UnitTests/TestResults/
      - store_artifacts:
          path: dotnet-backend/src/Tests/Integration/Kweet.IntegrationTests/TestResults/
  analyse-kweetapi:
    description: Scan with SonarQube
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:6.0
    steps:
      - checkout
      - run:
          name: Install & Run SonarScan and publish to "docker.rayco.digital:9000"
          command: |
            mkdir -p /usr/share/man/man1 && apt-get update && apt-get install -y --no-install-recommends openjdk-11-jre-headless && rm -rf /var/lib/apt/lists/*
            export JAVA_VER=11
            export JAVA_HOME="/usr/lib/jvm/java-11-openjdk-amd64"
            export PATH="${PATH}:/root/.dotnet/tools"
            cd dotnet-backend/src/Services/Kweet/Kweet.API
            dotnet new tool-manifest --force
            dotnet tool install dotnet-sonarscanner
            dotnet sonarscanner begin /k:"Kwetter" /d:sonar.host.url="http://185.182.185.197:9000" /d:sonar.login=$SONARQUBE_LOGIN
            dotnet build
            dotnet sonarscanner end /d:sonar.login=$SONARQUBE_LOGIN

  publish-kweetapi:
    description: Publish application to registry
    executor: gcp-gcr/default
    steps:
      - checkout
      - gcp-gcr/gcr-auth
      - gcp-gcr/build-image:
          image: Kweet-API
          path: dotnet-backend/src
          dockefile: Dockerfile.kweet
          tag: v-1
          no_output_timeout: 20m
          registry-url: eu.gcr.io
      - gcp-gcr/push-image:
          digest-path: /tmp/digest.txt
          image: Kweet-API
          tag: v-1
          registry-url: eu.gcr.io
      - run:
          command: |
            echo "Digest is: $(</tmp/digest.txt)"
    # executor: dind-executor
    # steps:
    #   - checkout
    #   - setup_remote_docker:
    #       docker_layer_caching: true
    #   - run:
    #       name: "Build and push Docker image"
    #       command: |
    #         cd dotnet-backend/src
    #         docker build -t raycoh/kweet-api -f Dockerfile.kweet .
    #   - run:
    #       name: Push to Docker Hub
    #       command: |
    #         docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_ACCESS_TOKEN
    #         docker push raycoh/kweet-api

workflows:
  kweetapi:
    when: << pipeline.parameters.run-kweet-workflow >>
    jobs:
      - test-kweetapi
      - analyse-kweetapi:
          requires:
            - test-kweetapi
      - publish-kweetapi:
          requires:
            - test-kweetapi
            - analyse-kweetapi
          filters:
            branches:
              only: main
  # usertimeline:
  #   when: << pipeline.parameters.run-usertimeline-workflow >>
  #   jobs:
  #     - build-timelineapi
  #     - build-timelineapi:
  #         filters:
  #           branches:
  #             only: main
  # common:
  #   when: << pipeline.parameters.run-common-workflow >>
  #   jobs:
  #     - build-common
  #     - build-common:
  #         filters:
  #           branches:
  #             only: main